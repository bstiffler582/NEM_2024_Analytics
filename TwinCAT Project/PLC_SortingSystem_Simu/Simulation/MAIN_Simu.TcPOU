<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN_Simu" Id="{f1851789-b3eb-4ed8-86d3-b85b32a95242}" SpecialFunc="None">
    <Declaration><![CDATA[(* =======================================================================================================================================
   OOP: Extended sample
   =======================================================================================================================================
   Description: 
   This PLC sample contains an object-oriented program to control a sorting system.
   The application can be controlled via an integrated visualization.
   
   PLC_SortingSystem_PLC:
   The functionality of the sorting system is implemented within this PLC project (PLC_SortingSystem_PLC).
   It also contains the visualization to control the application.
   
   PLC_SortingSystem_Simu:
   To run the project without hardware, the simulation PLC can be used.
   For example, It simulates the cylinder positions and temperatures, as well as the sensor signals (correspondent to the box positions). 
   =======================================================================================================================================
   InfoSys:
   https://infosys.beckhoff.de/content/1033/tc3_sampleprogram1/45035996374683915.html?id=6126826020926170206
   https://infosys.beckhoff.de/content/1033/tc3_plc_intro/72057596565231755.html?id=3937754078542861062
   ======================================================================================================================================= *)
PROGRAM MAIN_Simu
VAR
	// =============== Cylinder states ======================
	bClampAtBase		AT %Q*	: BOOL;						// True if clamp cylinder is in base position
	bClampAtWork		AT %Q*	: BOOL;						// True if clamp cylinder is in work position
	bBarrierAtBase		AT %Q*	: BOOL;						// True if barrier cylinder is in base position
	bBarrierAtWork		AT %Q*	: BOOL;						// True if barrier cylinder is in work position
	bMetalAtBase		AT %Q*	: BOOL;						// True if metal cylinder is in base position
	bMetalAtWork		AT %Q*	: BOOL;						// True if metal cylinder is in work position
	bPlasticAtBase		AT %Q*	: BOOL;						// True if plastic cylinder is in base position
	bPlasticAtWork		AT %Q*	: BOOL;						// True if plastic cylinder is in work position
	
	// =============== Temperatures =========================
	bReset				AT %I*	: BOOL;						// Reset temperatures
	fClampTempCurrent	AT %Q*	: LREAL;					// Current temperature of clamp cylinder
	fClampTempMax		AT %Q*	: LREAL;					// Maximum temperature of clamp cylinder
	fClampTempMin		AT %Q*	: LREAL;					// Minimum temperature of clamp cylinder
	fBarrierTemp		AT %Q*	: LREAL;					// Temperature of barrier cylinder
	fMetalTemp			AT %Q*	: LREAL;					// Temperature of metal cylinder
	fPlasticTemp		AT %Q*	: LREAL;					// Temperature of plastic cylinder

	// =============== Sensors to detect boxes ==============
	bBarrierSensor		AT %Q*	: BOOL;						// True if barrier sensor detects a box
	bMetalSensor		AT %Q*	: BOOL;						// True if metal sensor detects a metal box
	bPlasticSensor		AT %Q*	: BOOL;						// True if plastic sensor detects a box
	
	fbRandBoxType				: DRAND;					// randomized box types
	fbMetalSensorRt				: R_TRIG;
	bBoxAtMetalSensor			: BOOL;
	bBoxAtPlasticSensor			: BOOL;
	bBoxIsMetal					: BOOL;

	// =============== Position variables ===================
	fYClamp				AT %I*	: LREAL;					// Y-Coordinate of clamp cylinder
	fYBarrier			AT %I*	: LREAL;					// Y-Coordinate of barrier cylinder
	fYMetal				AT %I*	: LREAL;					// Y-Coordinate of metal cylinder
	fYPlastic			AT %I*	: LREAL;					// Y-Coordinate of plastic cylinder
	fBoxX				AT %I*	: ARRAY[1..4] OF LREAL;		// X-Coordinates of boxes
	fBoxY				AT %I*	: ARRAY[1..4] OF LREAL;		// Y-Coordinates of boxes
	
	bTempUp						: BOOL;						// To raise temperature of clamp cylinder
	fbTimerTempChange			: TON;						// Timer to change temperature
	tTempChange					: TIME 	:= T#500MS;			// Time to change temperature
	tCylinderCycles				: TIME	:= T#60S;			// Time to measure number of cylinder cycles
	fbCylinderCycleTimer		: TON;						// Timer to measure slope of cylinder rate
	
	// =============== Pressure variables ===================
	fClampPressure		AT %Q*	: LREAL;
	fBarrierPressure	AT %Q*	: LREAL;
	fPlasticPressure	AT %Q*	: LREAL;
	fMetalPressure		AT %Q*	: LREAL;
	
	// =============== Vibration Variables ==================
	fVibrationMetal			AT %Q* : LREAL;
	fVibrationPlastic		AT %Q* : LREAL;
	fVibrationSeparating	AT %Q* : LREAL;	
	fbDRAND							: DRAND;
	fRandom							: LREAL;
	fRandom2						: LREAL;
	fbTon							: TON;
	iTmrET							: INT;
	fbTonRand						: TON;
	BaseMetalInt					: LREAL;
	BasePlasticInt					: LREAL;
	BaseSeparateInt					: LREAL;
	
		
	// =============== Axis Information ======================
	
	fPlasticPosition	AT %I*	: LREAL;
	fPlasticVelocity	AT %I*	: LREAL;
	fMetalPosition		AT %I*	: LREAL;
	fMetalVelocity		AT %I*	: LREAL;
	fSeparatingPosition	AT %I*	: LREAL;	
	fSeparatingVelocity	AT %I*	: LREAL;
	
	ePackMLState		AT %I*	: E_PMLState;
	
	eMachineState		AT %I*	: E_MachineMode;
	
END_VAR
VAR CONSTANT
	// =============== Cylinder feedback ====================
	cClampAtWork				: LREAL	:= 3.0;				// Position of clamp cylinder in work position
	cClampAtBase				: LREAL	:= 0.0;				// Position of clamp cylinder in base position
	cBarrierAtWork				: LREAL	:= 63.0;			// Position of barrier cylinder in work position
	cBarrierAtBase				: LREAL	:= 0.0;				// Position of barrier cylinder in base position
	cMetalAtWorkMin				: LREAL	:= -72.9;			// Position of metal cylinder in work position - lower border
	cMetalAtWorkMax				: LREAL	:= -73.1;			// Position of metal cylinder in work position - upper border
	cMetalAtBase				: LREAL	:= 0.0;				// Position of metal cylinder in base position
	cPlasticAtWorkMin			: LREAL	:= -72.9;			// Position of plastic cylinder in work position - lower border
	cPlasticAtWorkMax			: LREAL	:= -73.1;			// Position of plastic cylinder in work position - upper border
	cPlasticAtBase				: LREAL	:= 0.0;				// Position of plastic cylinder in base position
	
	// =============== Sensor variables =====================
	cSensorsBoxesY				: LREAL	:= -5.0;
	
	cBarrierSensorBox1Xmin		: LREAL	:= -1.0;			// Position of Box 1 for barrier sensor to come true - lower border
	cBarrierSensorBox1Xmax		: LREAL	:= 60.0;			// Position of Box 1 for barrier sensor to come true - upper border
	cBarrierSensorBox2Xmin		: LREAL	:= 59.0;			// Position of Box 2 for barrier sensor to come true - lower border
	cBarrierSensorBox2Xmax		: LREAL	:= 120.0;			// Position of Box 2 for barrier sensor to come true - upper border
	cBarrierSensorBox3Xmin		: LREAL := 119.0;			// Position of Box 3 for barrier sensor to come true - lower border
	cBarrierSensorBox3Xmax		: LREAL := 180.0;			// Position of Box 3 for barrier sensor to come true - upper border
	cBarrierSensorBox4Xmin		: LREAL := 179.0;			// Position of Box 4 for barrier sensor to come true - lower border
	cBarrierSensorBox4Xmax		: LREAL := 240.0;			// Position of Box 4 for barrier sensor to come true - upper border
	
	cMetalSensorBox1Xmin		: LREAL := 134.0;			// Position of Box 1 for barrier sensor to come true - lower border
	cMetalSensorBox1Xmax		: LREAL := 197.0;			// Position of Box 1 for barrier sensor to come true - upper border
	cMetalSensorBox2Xmin		: LREAL := 198.0;			// Position of Box 1 for barrier sensor to come true - lower border
	cMetalSensorBox2Xmax		: LREAL := 255.0;			// Position of Box 1 for barrier sensor to come true - upper border
	cMetalSensorBox3Xmin		: LREAL := 256.0;			// Position of Box 1 for barrier sensor to come true - lower border
	cMetalSensorBox3Xmax		: LREAL := 314.0;			// Position of Box 1 for barrier sensor to come true - upper border
	cMetalSensorBox4Xmin		: LREAL := 314.0;			// Position of Box 4 for barrier sensor to come true - lower border
	cMetalSensorBox4Xmax		: LREAL := 377.0;			// Position of Box 4 for barrier sensor to come true - upper border
	
	cPlasticSensorBox1Xmin		: LREAL := 384.0;			// Position of Box 1 for barrier sensor to come true - lower border
	cPlasticSensorBox1Xmax		: LREAL := 447.0;			// Position of Box 1 for barrier sensor to come true - upper border
	cPlasticSensorBox2Xmin		: LREAL := 444.0;			// Position of Box 2 for barrier sensor to come true - lower border
	cPlasticSensorBox2Xmax		: LREAL := 507.0;			// Position of Box 2 for barrier sensor to come true - upper border
	cPlasticSensorBox3Xmin		: LREAL := 504.0;			// Position of Box 3 for barrier sensor to come true - lower border
	cPlasticSensorBox3Xmax		: LREAL := 567.0;			// Position of Box 3 for barrier sensor to come true - upper border
	cPlasticSensorBox4Xmin		: LREAL := 564.0;			// Position of Box 4 for barrier sensor to come true - lower border
	cPlasticSensorBox4Xmax		: LREAL := 627.0;			// Position of Box 4 for barrier sensor to come true - upper border
	
	// =============== Temperatures =========================
	cClampTempMax				: LREAL := 60.5;			// Maximal clamp temperature
	cClampTempMin				: LREAL := 0;				// Minimal clamp temperature
	cClampTempCurrent			: LREAL := 10.7;			// Current clamp temperature (simulated value)
	
	cBarrierTempMax				: LREAL := 55.0;			// Maximal clamp temperature
	cBarrierTempMin				: LREAL := 10.0;			// Minimal clamp temperature
	cBarrierTempChange			: LREAL := 1.2;				// Temperature change for clamp cylinder

	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// =========================================================
// Resetting temperatures
	
IF bReset THEN
	fClampTempCurrent 		:= 45;
	fBarrierTemp 			:= 45;
	fMetalTemp				:= 45;
	fPlasticTemp			:= 45;
	fVibrationMetal			:= 0;
	fVibrationPlastic		:= 0;
	fVibrationSeparating	:= 0;
	BaseMetalInt			:= 0.255;
	BasePlasticInt			:= 0.125;
	BaseSeparateInt			:= 0.375;	
END_IF

// =========================================================
// Cylinder temperatures
	
Temperatures();

// =========================================================
// Output variables
	
SetOutput();

// =========================================================
// Vibration Simulation Code
	
fbTonRand(IN := NOT fbTonRand.Q , PT:=INT_TO_TIME(1000), Q => , ET =>);
iTmrET := TIME_TO_INT(fbTonRand.ET);
fbDRAND(Seed:= iTmrET, Num=> fRandom);
fbDRAND(Seed:= iTmrET, Num=> fRandom2);

fbTon(IN := NOT fbTon.Q , PT:=T#1S, Q => , ET =>);

IF (fYMetal <> 0) THEN
	fVibrationMetal := BaseMetalInt + (fRandom * (1 / MAX(0.01, fRandom2)));
ELSE
	fVibrationMetal := BaseMetalInt + (fRandom / 10);
END_IF

IF (fYPlastic <> 0) THEN
	fVibrationPlastic := BasePlasticInt + (fRandom * (1 / MAX(0.01, fRandom2)));
ELSE
	fVibrationPlastic := BasePlasticInt + (fRandom / 10);
END_IF

IF (fYClamp <> 0) THEN
	fVibrationSeparating := BaseSeparateInt + (fRandom * (1 / MAX(0.01, fRandom2)));
ELSE
	fVibrationSeparating := BaseSeparateInt + (fRandom / 10);
END_IF

IF fbTon.Q THEN
	BaseMetalInt := BaseMetalInt + 0.00001;
	BasePlasticInt := BasePlasticInt + 0.00001;
	BaseSeparateInt := BaseSeparateInt + 0.00001;
END_IF
	
	
// =========================================================
// Set Pressure Variables

IF bClampAtWork OR bClampAtBase THEN
	fClampPressure := 85 + (fRandom2 / 10.5);
ELSE
	fClampPressure := 61 + (fRandom * 40.1);
END_IF

IF bBarrierAtWork OR bBarrierAtBase THEN
	fBarrierPressure := 84 - (fRandom2 / 12);
ELSE
	fBarrierPressure := 62 + (fRandom * 41.3);
END_IF

IF bPlasticAtWork OR bPlasticAtBase THEN
	fPlasticPressure := 85 - (fRandom2 / 11.5);
ELSE
	fPlasticPressure := 60 + (fRandom * 42.8);
END_IF

IF bMetalAtWork OR bMetalAtBase THEN
	fMetalPressure := 84 + (fRandom2 / 9.5);
ELSE
	fMetalPressure := 66 + (fRandom * 43.9);
END_IF

// =========================================================
// Determine box type

bBoxAtMetalSensor := ( (fBoxY[1] >= cSensorsBoxesY) AND (fBoxX[1] > cMetalSensorBox1Xmin) 	AND (fBoxX[1] < cMetalSensorBox1Xmax) )
					OR 	( (fBoxY[2] >= cSensorsBoxesY) AND (fBoxX[2] > cMetalSensorBox2Xmin) 	AND (fBoxX[2] < cMetalSensorBox2Xmax) )
					OR 	( (fBoxY[3] >= cSensorsBoxesY) AND (fBoxX[3] > cMetalSensorBox3Xmin) 	AND (fBoxX[3] < cMetalSensorBox3Xmax) )
					OR 	( (fBoxY[4] >= cSensorsBoxesY) AND (fBoxX[4] > cMetalSensorBox4Xmin) 	AND (fBoxX[4] < cMetalSensorBox4Xmax) );


fbRandBoxType(Seed:=iTmrET+7);
fbMetalSensorRt(CLK:=bBoxAtMetalSensor);

IF fbMetalSensorRt.Q THEN
	IF fbRandBoxType.Num > 0.60 THEN
		bBoxIsMetal := TRUE;
	ELSE
		bBoxIsMetal := FALSE;
	END_IF
END_IF
		
	
	]]></ST>
    </Implementation>
    <Method Name="SetOutput" Id="{ba6e6248-654d-44a4-ba4b-662e220b131b}">
      <Declaration><![CDATA[METHOD PRIVATE SetOutput
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =========================================================
// Cylinder feedback for base and work position
	
	bClampAtWork 	:= (fYClamp = cClampAtWork);
	bClampAtBase 	:= (fYClamp = cClampAtBase);
	bBarrierAtWork 	:= (fYBarrier = cBarrierAtWork);
	bBarrierAtBase 	:= (fYBarrier = cBarrierAtBase);
	bMetalAtWork 	:= (fYMetal < cMetalAtWorkMin) AND (fYMetal > cMetalAtWorkMax);
	bMetalAtBase 	:= (fYMetal = cMetalAtBase);
	bPlasticAtWork 	:= (fYPlastic < cPlasticAtWorkMin) AND (fYPlastic > cPlasticAtWorkMax);
	bPlasticAtBase 	:= (fYPlastic = cPlasticAtBase);

// =========================================================
// Sensor variables
	
	bBarrierSensor := 	( (fBoxY[1] >= cSensorsBoxesY) AND (fBoxX[1] > cBarrierSensorBox1Xmin) 	AND (fBoxX[1] < cBarrierSensorBox1Xmax) )
					OR 	( (fBoxY[2] >= cSensorsBoxesY) AND (fBoxX[2] > cBarrierSensorBox2Xmin) 	AND (fBoxX[2] < cBarrierSensorBox2Xmax) )
					OR 	( (fBoxY[3] >= cSensorsBoxesY) AND (fBoxX[3] > cBarrierSensorBox3Xmin) 	AND (fBoxX[3] < cBarrierSensorBox3Xmax) )
					OR 	( (fBoxY[4] >= cSensorsBoxesY) AND (fBoxX[4] > cBarrierSensorBox4Xmin) 	AND (fBoxX[4] < cBarrierSensorBox4Xmax) );
					
	bMetalSensor := 	bBoxAtMetalSensor AND bBoxIsMetal;
					
	bPlasticSensor := 	( (fBoxY[1] >= cSensorsBoxesY) AND (fBoxX[1] > cPlasticSensorBox1Xmin) 	AND (fBoxX[1] < cPlasticSensorBox1Xmax) )
					OR 	( (fBoxY[2] >= cSensorsBoxesY) AND (fBoxX[2] > cPlasticSensorBox2Xmin) 	AND (fBoxX[2] < cPlasticSensorBox2Xmax) )
					OR 	( (fBoxY[3] >= cSensorsBoxesY) AND (fBoxX[3] > cPlasticSensorBox3Xmin) 	AND (fBoxX[3] < cPlasticSensorBox3Xmax) )
					OR 	( (fBoxY[4] >= cSensorsBoxesY) AND (fBoxX[4] > cPlasticSensorBox4Xmin) 	AND (fBoxX[4] < cPlasticSensorBox4Xmax) );

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Method Name="Temperatures" Id="{1ffb2e92-3645-4f6b-9613-68a402f6c3a4}">
      <Declaration><![CDATA[METHOD PRIVATE Temperatures
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =========================================================
// Temperature of cylinders - Clamp

fClampTempMax 		:= cClampTempMax;
fClampTempMin 		:= cClampTempMin;

// =========================================================
// Temperature of cylinders - Barrier

fbTimerTempChange(IN:=(NOT fbTimerTempChange.Q), PT:=tTempChange);

IF fbTimerTempChange.Q THEN
	
	IF (fYClamp <> 0) THEN
		fClampTempCurrent := 51 - fRandom * 1.25;
	ELSE
		fClampTempCurrent := 52 + fRandom * 5.25;
	END_IF
	
	IF (fYBarrier <> 0) THEN
		fBarrierTemp := 48 - fRandom * 1.25;
	ELSE
		fBarrierTemp := 48 + fRandom * 2.25;
	END_IF
	
	IF (fYMetal <> 0) THEN
		fMetalTemp := 46 + fRandom * 4.25;
	ELSE
		fMetalTemp := 45 - fRandom * 1.25;
	END_IF
	
	IF (fYPlastic <> 0) THEN
		fPlasticTemp := 47 + fRandom2 * 2.25;
	ELSE
		fPlasticTemp := 46 - fRandom2 * 1.25;
	END_IF
	
END_IF

	]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN_Simu">
      <LineId Id="3" Count="5" />
      <LineId Id="778" Count="1" />
      <LineId Id="268" Count="1" />
      <LineId Id="267" Count="0" />
      <LineId Id="767" Count="1" />
      <LineId Id="766" Count="0" />
      <LineId Id="9" Count="11" />
      <LineId Id="2" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="1154" Count="0" />
      <LineId Id="424" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="254" Count="1" />
      <LineId Id="258" Count="0" />
      <LineId Id="604" Count="0" />
      <LineId Id="1136" Count="0" />
      <LineId Id="1140" Count="0" />
      <LineId Id="1137" Count="0" />
      <LineId Id="1139" Count="0" />
      <LineId Id="1138" Count="0" />
      <LineId Id="1141" Count="1" />
      <LineId Id="1147" Count="0" />
      <LineId Id="1144" Count="0" />
      <LineId Id="1146" Count="0" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1148" Count="0" />
      <LineId Id="1150" Count="3" />
      <LineId Id="1149" Count="0" />
      <LineId Id="760" Count="2" />
      <LineId Id="764" Count="1" />
      <LineId Id="763" Count="0" />
      <LineId Id="392" Count="1" />
      <LineId Id="395" Count="6" />
      <LineId Id="394" Count="0" />
      <LineId Id="402" Count="0" />
      <LineId Id="404" Count="3" />
      <LineId Id="403" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="413" Count="3" />
      <LineId Id="412" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="419" Count="3" />
      <LineId Id="418" Count="0" />
      <LineId Id="940" Count="0" />
      <LineId Id="942" Count="0" />
      <LineId Id="939" Count="0" />
      <LineId Id="955" Count="0" />
      <LineId Id="957" Count="2" />
      <LineId Id="956" Count="0" />
      <LineId Id="954" Count="0" />
      <LineId Id="943" Count="0" />
      <LineId Id="950" Count="0" />
      <LineId Id="966" Count="0" />
      <LineId Id="1155" Count="0" />
      <LineId Id="968" Count="1" />
      <LineId Id="971" Count="0" />
      <LineId Id="978" Count="1" />
      <LineId Id="972" Count="0" />
      <LineId Id="970" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="238" Count="0" />
    </LineIds>
    <LineIds Name="MAIN_Simu.SetOutput">
      <LineId Id="3" Count="20" />
      <LineId Id="25" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="MAIN_Simu.Temperatures">
      <LineId Id="3" Count="4" />
      <LineId Id="9" Count="3" />
      <LineId Id="46" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="129" Count="2" />
      <LineId Id="135" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="142" Count="3" />
      <LineId Id="141" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="108" Count="1" />
      <LineId Id="104" Count="0" />
      <LineId Id="110" Count="2" />
      <LineId Id="114" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="76" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>